///////////////////////////////////////////////////////////
//  Arena.cs
//  Implementation of the Class MyBrick
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2017 1:09:03 PM
//  Original author: 0849480
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Lego.Ev3.Core;
using Lego.Ev3.Desktop;

namespace LegoStormGrp5
{

    public class Arena
    {

        /// <summary>
        /// Contains Blue, Red, Black, Yellow {2 ,5 ,1 ,4 }
        /// </summary>
        public int[] HomeCnr;
        public int[] Colors = { 2, 5, 1, 4 };

        public Sensing pSensing;
        public Motion pMotion;
        public Brick pBrick;

        public Arena(Brick _Brick)
        {
            pBrick = _Brick;
        }

        /// <summary>
        /// Rotate 360 to determine the shortest distance.
        /// </summary>
        /// <param name="pGyro"></param>
        /// <param name="pDistance"></param>
        public int GetNearestWallColor(int pGyro, double pDistance)
        {

            return 0;
        }

        /// 
        /// <param name="pColorStart"></param>
        public int MovementLogic(int pColorStart)
        {
            
            int Left;
            var index = Array.IndexOf(Colors, pColorStart);

            switch (index)
            {
                case 0:
                    Left = 3;
                    break;

                default:
                    Left = index - 1;
                    break;
            }

            if (Colors[index] == HomeCnr[0] || Colors[index] == HomeCnr[1])
            {
                if (Colors[Left] == HomeCnr[0] || Colors[Left] == HomeCnr[1])
                {
                    return -90;
                }
                else
                {
                    return 90;
                }
            }
            else
            {
                return 180;
            }

        }

        public int AlignToWall()
        {
            pSensing = new Sensing(pBrick);             //declare local instances of Sensing and Motion classe
            pMotion = new Motion();

                                                        //    <=- Order of operations -=>

            double vDist = pSensing.GetDist();              // 1. Retrieve current distance
            int vGyro = pSensing.GetGyro();                 // 1. Retrieve current gyro

            double vDistShortest = vDist;               // Variable for storing shortest distance
            int vGyroShortest = vGyro;                  // Variable for storing store shortest gyro

            int vGyroStart = vGyro;                         // 2. Store starting gyro for reallignment

            if (vDist >= 2)                                 // 3. If distance <= 2cm move backwards for manuverability
            {
                pMotion.Move(-50, -50, 50, false);
            }

            pMotion.Rotate(360);                            // 4. Do a 360* turn

            do                                              // 5. Update vShortestDist+Gyro if vCurrentDist+Gyro is shorter
            {
                if (vDist < vDistShortest)
                {
                    vDistShortest = vDist;
                }
            } while (vGyro != (vGyroStart + 360));       // until 360 turn is complete

            pMotion.Rotate(vGyroShortest - vGyro);

            do                                              // 6. Get within working colour sensor distance
            {
                pMotion.Move(20, 20, 100, false);
            } while (vDist > 1);

            pMotion.Move(0, 0, 100, true);              // Break motors

            int vColour = pSensing.GetClr();                // 7. Store wall colour

            do                                              // 8. Reverse for turning space
            {
                pMotion.Move(-50, -50, 50, false);
            } while (vDist < 2);

            pMotion.Move(0, 0, 100, true);              // Break motors

            return vColour;                                 // 9. Return wall colour
        }
    }

    //end MyBrick
}