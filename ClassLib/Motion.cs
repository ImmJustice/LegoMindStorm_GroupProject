///////////////////////////////////////////////////////////
//  Motion.cs
//  Implementation of the Class Motion
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2017 1:09:15 PM
//  Original author: 0849480
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Lego.Ev3.Core;
using Lego.Ev3.Desktop;

namespace LegoStormGrp5
{
    public class Motion
    {

        Brick brick = new Brick();

        public Motion()
        {

        }

        ~Motion()
        {

        }

        /// 
        /// <param name="pPower1"></param>
        /// <param name="pPower2"></param>
        /// <param name="pTime"></param>
        /// <param name="pBrake"></param>
        public async void Move(int pPower1, int pPower2, uint pTime, bool pBrake)
        {
            
            //brick.BatchCommand.TurnMotorAtPowerForTime(OutputPort.A, pPower1, pTime, pBrake | OutputPort.B, pPower2, pTime, false);    <--- code Lachie was talking about where we use both motors.
            
            brick.BatchCommand.TurnMotorAtPowerForTime(OutputPort.A, pPower1, pTime, pBrake);
            brick.BatchCommand.TurnMotorAtPowerForTime(OutputPort.B, pPower2, pTime, pBrake);
            await brick.BatchCommand.SendCommandAsync();
        }

        /// <summary>
        /// pGyroTurn = how much to turn
        /// </summary>
        /// <param name="pGyroTurn"></param>
        public async void Rotate(int pGyroTurn)
        {
            if(pGyroTurn > 0)
            {
                //gyro we want = actual gyro + pgyro;
                

                //Turn right, until current gyro = gyro we want ^^^
            }
            else
            {
                //Turn Left;
            }
        }
	        
    }

}//end Motion
